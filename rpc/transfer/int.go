// generated by Go Code Generator(https://github.com/OhYee/gcg); DO NOT EDIT

package transfer

import ()

// fromInt8 transfer from `int8` to `[]byte`
func fromInt8(value int8) (b []byte, err error) {
	b = []byte{TypeInt8, uint8(value)}
	return
}

// fromUint8 transfer from `uint8` to `[]byte`
func fromUint8(value uint8) (b []byte, err error) {
	b = []byte{TypeUint8, value}
	return
}

// fromInt16 transfer from `int16` to `[]byte`
func fromInt16(value int16) (b []byte, err error) {
	b = make([]byte, 2)
	byteOrder.PutUint16(b, uint16(value))
	b = append([]byte{TypeInt16}, b...)
	return
}

// fromUint16 transfer from `uint16` to `[]byte`
func fromUint16(value uint16) (b []byte, err error) {
	b = make([]byte, 2)
	byteOrder.PutUint16(b, value)
	b = append([]byte{TypeUint16}, b...)

	return
}

// fromInt32 transfer from `int32` to `[]byte`
func fromInt32(value int32) (b []byte, err error) {
	b = make([]byte, 4)
	byteOrder.PutUint32(b, uint32(value))
	b = append([]byte{TypeInt32}, b...)
	return
}

// fromUint32 transfer from `uint32` to `[]byte`
func fromUint32(value uint32) (b []byte, err error) {
	b = make([]byte, 4)
	byteOrder.PutUint32(b, value)
	b = append([]byte{TypeUint32}, b...)

	return
}

// fromInt64 transfer from `int64` to `[]byte`
func fromInt64(value int64) (b []byte, err error) {
	b = make([]byte, 8)
	byteOrder.PutUint64(b, uint64(value))
	b = append([]byte{TypeInt64}, b...)
	return
}

// fromUint64 transfer from `uint64` to `[]byte`
func fromUint64(value uint64) (b []byte, err error) {
	b = make([]byte, 8)
	byteOrder.PutUint64(b, value)
	b = append([]byte{TypeUint64}, b...)

	return
}
